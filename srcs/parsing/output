void			add_argument_to_cmd(t_cmd *cmd, char *arg);
void			add_cmd_to_list(t_cmd **cmd_list, t_cmd *new_cmd);
int				add_content_token(t_parse *p, char *content, int is_quoted);
int				add_operator_token(t_parse *p, char *op);
void			add_token_to_list(t_token *token_list, t_token *new_token);
static void		advance_var_name(char *str, int *i);
static char		*append_char(char *result, char c);
char			*append_content(char *content, char *tmp);
static char		*append_dollar(t_expand_ctx *ctx);
static char		*append_substr_to_result(char *str, int start, int end, char *res);
static char		*append_var_value(t_expand_ctx *ctx, char *var_value);
t_token_type	classify_token(char *str, int is_first_token, int is_quoted);
void			close_all_cmd_fds(t_cmd *head);
void			close_cmd_fds(t_cmd *cmd);
void			close_outfile(t_cmd *cmd);
t_cmd			*create_base_cmd(t_token *token);
char			*create_tmp_heredoc_file(void);
t_token			*create_token(char *content, t_token_type type, int is_quoted);
void			execute_cmd(t_shell *shell, t_cmd *cmd);
void			execute_command_list(t_shell *shell);
void			execve_failed(t_shell *shell, t_cmd *cmd, char *path);
char			*expand_heredoc(t_shell *shell, char *line, int exp, int quote);
static void		expand_or_not(t_extract_ctx *ctx, t_shell *shell);
char			*expand_variables(char *str, t_shell *shell, int quote_type, int initial_parse);
char			*extract_operator(char *line, int *index);
char			*extract_quote(char *line, int *index, int *is_quoted, t_shell *shell);
char			*extract_var_name(char *str, int *index);
char			*extract_word(char *line, int *index, t_shell *shell);
static void		find_closing_quote(t_extract_ctx *ctx, char *line);
char			*find_env_path(t_shell *shell);
void			fork_error_handler(t_shell *shell, t_cmd *cmd, int err, int exit_code);
void			free_cmd_list(t_cmd *cmd);
void			free_matrix(char **str);
void			free_single_cmd(t_cmd *cmd);
void			free_tokens(t_token *token);
t_token			*ft_last(t_token *lst);
char			*get_cmd_path(t_shell *shell, t_cmd *cmd, char *command);
char			*get_content(char *line, int *i, int *is_quoted, t_shell *shell);
char			*get_env_value(t_shell *shell, char *var_name);
int				get_heredoc_content(t_shell *shell, char *delimiter, int quoted, int out_fd);
char			*get_next_piece(char *line, int *i, int *quoted, t_shell *shell);
char			**get_paths(t_shell *shell);
int				handle_arg_flag_token(t_cmd **current, t_cmd **cmd_list, t_token *tok);
static int		handle_cmd_advance(t_token **tok, t_cmd **cmd_list, t_cmd **current, t_shell *shell);
int				handle_cmd_token(t_cmd **cmd_list, t_cmd **cur, t_token **tok, t_shell *sh);
int				handle_content(t_parse *p);
void			handle_dummy_in_token(t_cmd **cur, t_token **tok);
int				handle_fork_creation(t_cmd *current);
void			handle_heredoc_signal(int sig);
int				handle_operator(t_parse *p);
int				handle_pipe_creation(t_cmd *current, int *fd_pipe);
int				handle_pipe_token(t_token *token, t_cmd **current, t_cmd **cmd_list);
static int		handle_redir_token(t_cmd **current, t_cmd **cmd_list, t_token **tok, t_shell *sh);
int				handle_redirection(t_cmd *cmd, t_token *token, t_shell *shell);
static int		handle_redirection_advance(t_token **tok, t_cmd **cmd_list, t_cmd **current, t_shell *shell);
char			*handle_special_vars(t_shell *shell, char *var_name);
static int		handle_standard_advance(t_token **tok, t_cmd **cmd_list, t_cmd **current, t_shell *shell);
static int		handle_token_in_loop(t_token **tok, t_cmd **cmd_list, t_cmd **current, t_shell *shell);
t_cmd			*init_new_cmd(void);
int				is_directory(char *path);
int				is_dummy_command(t_cmd *cmd);
int				is_preceded_by_heredoc(char *str, int i);
bool			is_quote(char c);
int				is_redirection_token(t_token_type type);
int				is_space(char c);
bool			is_special(char c);
int				is_valid_command(t_cmd *cmd, char *command);
void			merge_dummy_to_real(t_cmd *dummy, t_cmd *real);
int				next_quote_idx(char *str, int i);
t_cmd			*optimize_command_list(t_cmd *cmd_list);
t_cmd			*parse_tokens(t_token *tokens, t_shell *shell);
void			print_envp_char(char **envp);
int				process_command_loop(t_shell *shell, t_cmd *current, int *prev_pipe);
char			*process_literal_text(char *str, int *i, char *result);
static char		*process_loop(t_expand_ctx *ctx);
static int		process_token(t_token *tok, t_cmd **cmd_list, t_cmd **current, t_shell *shell);
int				process_tokens(t_parse *p);
char			*process_variable(t_expand_ctx *ctx);
t_cmd			*remove_dummy_from_list(t_cmd *cmd_list, t_cmd *to_remove);
void			restore_signals(void);
char			*search_command(char **paths, char *cmd);
void			setup_child_process(t_cmd *current, int prev_pipe, int *fd_pipe);
int				setup_heredoc(t_cmd *cmd, char *delimiter, t_shell *shell, int quoted);
void			setup_heredoc_signals(void);
int				setup_input_redir(t_cmd *cmd, char *filename);
int				setup_output_redir(t_cmd *cmd, char *filename, int append);
void			setup_parent_process(int prev_pipe, int *fd_pipe, t_cmd *current);
static bool		should_break(t_shell *shell, char *line, char *delimiter);
int				should_expand_in_quotes(int quote_type);
char			*surround_with_quotes(char *str);
int				tokenize_input(t_token *token_list, char **l, t_shell *shell);
int				update_prev_pipe(t_cmd *current, int *fd_pipe, int prev_pipe);
static char		update_quote_state(char c, char curr);
void			update_state(t_token_type type, int *is_first, int *waiting);
void			wait_for_children_safe(t_cmd *cmd_list, t_shell *shell);